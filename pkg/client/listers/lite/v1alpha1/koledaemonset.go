/*
Copyright 2022 The OpenYurt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openyurtio/kole/pkg/apis/lite/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KoleDaemonSetLister helps list KoleDaemonSets.
// All objects returned here must be treated as read-only.
type KoleDaemonSetLister interface {
	// List lists all KoleDaemonSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KoleDaemonSet, err error)
	// KoleDaemonSets returns an object that can list and get KoleDaemonSets.
	KoleDaemonSets(namespace string) KoleDaemonSetNamespaceLister
	KoleDaemonSetListerExpansion
}

// koleDaemonSetLister implements the KoleDaemonSetLister interface.
type koleDaemonSetLister struct {
	indexer cache.Indexer
}

// NewKoleDaemonSetLister returns a new KoleDaemonSetLister.
func NewKoleDaemonSetLister(indexer cache.Indexer) KoleDaemonSetLister {
	return &koleDaemonSetLister{indexer: indexer}
}

// List lists all KoleDaemonSets in the indexer.
func (s *koleDaemonSetLister) List(selector labels.Selector) (ret []*v1alpha1.KoleDaemonSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KoleDaemonSet))
	})
	return ret, err
}

// KoleDaemonSets returns an object that can list and get KoleDaemonSets.
func (s *koleDaemonSetLister) KoleDaemonSets(namespace string) KoleDaemonSetNamespaceLister {
	return koleDaemonSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KoleDaemonSetNamespaceLister helps list and get KoleDaemonSets.
// All objects returned here must be treated as read-only.
type KoleDaemonSetNamespaceLister interface {
	// List lists all KoleDaemonSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KoleDaemonSet, err error)
	// Get retrieves the KoleDaemonSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KoleDaemonSet, error)
	KoleDaemonSetNamespaceListerExpansion
}

// koleDaemonSetNamespaceLister implements the KoleDaemonSetNamespaceLister
// interface.
type koleDaemonSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KoleDaemonSets in the indexer for a given namespace.
func (s koleDaemonSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KoleDaemonSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KoleDaemonSet))
	})
	return ret, err
}

// Get retrieves the KoleDaemonSet from the indexer for a given namespace and name.
func (s koleDaemonSetNamespaceLister) Get(name string) (*v1alpha1.KoleDaemonSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("koledaemonset"), name)
	}
	return obj.(*v1alpha1.KoleDaemonSet), nil
}
