/*
Copyright 2022 The OpenYurt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openyurtio/kole/pkg/apis/lite/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InfEdgeNodeLister helps list InfEdgeNodes.
// All objects returned here must be treated as read-only.
type InfEdgeNodeLister interface {
	// List lists all InfEdgeNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InfEdgeNode, err error)
	// InfEdgeNodes returns an object that can list and get InfEdgeNodes.
	InfEdgeNodes(namespace string) InfEdgeNodeNamespaceLister
	InfEdgeNodeListerExpansion
}

// infEdgeNodeLister implements the InfEdgeNodeLister interface.
type infEdgeNodeLister struct {
	indexer cache.Indexer
}

// NewInfEdgeNodeLister returns a new InfEdgeNodeLister.
func NewInfEdgeNodeLister(indexer cache.Indexer) InfEdgeNodeLister {
	return &infEdgeNodeLister{indexer: indexer}
}

// List lists all InfEdgeNodes in the indexer.
func (s *infEdgeNodeLister) List(selector labels.Selector) (ret []*v1alpha1.InfEdgeNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InfEdgeNode))
	})
	return ret, err
}

// InfEdgeNodes returns an object that can list and get InfEdgeNodes.
func (s *infEdgeNodeLister) InfEdgeNodes(namespace string) InfEdgeNodeNamespaceLister {
	return infEdgeNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InfEdgeNodeNamespaceLister helps list and get InfEdgeNodes.
// All objects returned here must be treated as read-only.
type InfEdgeNodeNamespaceLister interface {
	// List lists all InfEdgeNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InfEdgeNode, err error)
	// Get retrieves the InfEdgeNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InfEdgeNode, error)
	InfEdgeNodeNamespaceListerExpansion
}

// infEdgeNodeNamespaceLister implements the InfEdgeNodeNamespaceLister
// interface.
type infEdgeNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InfEdgeNodes in the indexer for a given namespace.
func (s infEdgeNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InfEdgeNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InfEdgeNode))
	})
	return ret, err
}

// Get retrieves the InfEdgeNode from the indexer for a given namespace and name.
func (s infEdgeNodeNamespaceLister) Get(name string) (*v1alpha1.InfEdgeNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("infedgenode"), name)
	}
	return obj.(*v1alpha1.InfEdgeNode), nil
}
