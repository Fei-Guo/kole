/*
Copyright 2022 The OpenYurt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openyurtio/kole/pkg/apis/lite/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueryNodeLister helps list QueryNodes.
// All objects returned here must be treated as read-only.
type QueryNodeLister interface {
	// List lists all QueryNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueryNode, err error)
	// QueryNodes returns an object that can list and get QueryNodes.
	QueryNodes(namespace string) QueryNodeNamespaceLister
	QueryNodeListerExpansion
}

// queryNodeLister implements the QueryNodeLister interface.
type queryNodeLister struct {
	indexer cache.Indexer
}

// NewQueryNodeLister returns a new QueryNodeLister.
func NewQueryNodeLister(indexer cache.Indexer) QueryNodeLister {
	return &queryNodeLister{indexer: indexer}
}

// List lists all QueryNodes in the indexer.
func (s *queryNodeLister) List(selector labels.Selector) (ret []*v1alpha1.QueryNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueryNode))
	})
	return ret, err
}

// QueryNodes returns an object that can list and get QueryNodes.
func (s *queryNodeLister) QueryNodes(namespace string) QueryNodeNamespaceLister {
	return queryNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueryNodeNamespaceLister helps list and get QueryNodes.
// All objects returned here must be treated as read-only.
type QueryNodeNamespaceLister interface {
	// List lists all QueryNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueryNode, err error)
	// Get retrieves the QueryNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QueryNode, error)
	QueryNodeNamespaceListerExpansion
}

// queryNodeNamespaceLister implements the QueryNodeNamespaceLister
// interface.
type queryNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QueryNodes in the indexer for a given namespace.
func (s queryNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QueryNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueryNode))
	})
	return ret, err
}

// Get retrieves the QueryNode from the indexer for a given namespace and name.
func (s queryNodeNamespaceLister) Get(name string) (*v1alpha1.QueryNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("querynode"), name)
	}
	return obj.(*v1alpha1.QueryNode), nil
}
